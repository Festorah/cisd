# Generated by Django 5.2.5 on 2025-08-16 01:11

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Author's full name as it should appear publicly",
                        max_length=200,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.MaxLengthValidator(200),
                        ],
                        verbose_name="Full Name",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Job title or role (e.g., 'Senior Policy Analyst')",
                        max_length=200,
                        verbose_name="Professional Title",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Brief professional biography (max 1000 characters)",
                        max_length=1000,
                        verbose_name="Biography",
                    ),
                ),
                (
                    "profile_image_url",
                    models.URLField(
                        blank=True,
                        help_text="Cloudinary URL for author's profile photo",
                        max_length=500,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="Profile Image URL",
                    ),
                ),
                (
                    "profile_image_public_id",
                    models.CharField(
                        blank=True,
                        help_text="Cloudinary public ID for profile image management",
                        max_length=200,
                        verbose_name="Profile Image Public ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Public contact email (optional)",
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email Address",
                    ),
                ),
                (
                    "twitter_handle",
                    models.CharField(
                        blank=True,
                        help_text="Twitter username without @ symbol",
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid Twitter handle",
                                regex="^[A-Za-z0-9_]{1,50}$",
                            )
                        ],
                        verbose_name="Twitter Handle",
                    ),
                ),
                (
                    "linkedin_url",
                    models.URLField(
                        blank=True,
                        help_text="Full LinkedIn profile URL",
                        max_length=300,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="LinkedIn URL",
                    ),
                ),
                (
                    "website_url",
                    models.URLField(
                        blank=True,
                        help_text="Personal or professional website URL",
                        max_length=300,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="Website URL",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this author can be assigned to new content",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this author should be featured on the team page",
                        verbose_name="Is Featured",
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which authors appear in lists",
                        verbose_name="Sort Order",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        help_text="Link to Django user account (optional)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User Account",
                    ),
                ),
            ],
            options={
                "verbose_name": "Author",
                "verbose_name_plural": "Authors",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("analysis", "Analysis"),
                            ("campaign", "Campaign"),
                            ("explainer", "Explainer"),
                            ("qna", "Q&A"),
                            ("news", "News"),
                            ("research", "Research"),
                            ("report", "Report"),
                            ("opinion", "Opinion"),
                            ("interview", "Interview"),
                            ("feature", "Feature"),
                        ],
                        db_index=True,
                        help_text="Internal name for the category (used in URLs and code)",
                        max_length=50,
                        unique=True,
                        verbose_name="Category Name",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable name shown to users",
                        max_length=100,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.MaxLengthValidator(100),
                        ],
                        verbose_name="Display Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of what this category represents",
                        max_length=500,
                        verbose_name="Description",
                    ),
                ),
                (
                    "color_code",
                    models.CharField(
                        default="#dc2626",
                        help_text="Hex color code for category display (e.g., #dc2626)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid hex color code (e.g., #dc2626)",
                                regex="^#[0-9a-fA-F]{6}$",
                            )
                        ],
                        verbose_name="Color Code",
                    ),
                ),
                (
                    "icon_class",
                    models.CharField(
                        blank=True,
                        help_text="FontAwesome or other icon class for category display",
                        max_length=100,
                        verbose_name="Icon Class",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this category is available for new content",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which categories appear in lists (lower numbers first)",
                        verbose_name="Sort Order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ["sort_order", "display_name"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "sort_order"],
                        name="core_catego_is_acti_5a954b_idx",
                    ),
                    models.Index(fields=["name"], name="core_catego_name_6ef604_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="CloudinaryMedia",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        help_text="Descriptive title for the media file",
                        max_length=300,
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.MaxLengthValidator(300),
                        ],
                        verbose_name="Title",
                    ),
                ),
                (
                    "cloudinary_url",
                    models.URLField(
                        db_index=True,
                        help_text="Full Cloudinary URL for the media file",
                        max_length=500,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="Cloudinary URL",
                    ),
                ),
                (
                    "cloudinary_public_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique Cloudinary identifier for file operations",
                        max_length=300,
                        unique=True,
                        verbose_name="Cloudinary Public ID",
                    ),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("document", "Document"),
                            ("audio", "Audio"),
                            ("archive", "Archive"),
                            ("other", "Other"),
                        ],
                        db_index=True,
                        help_text="Type of media file",
                        max_length=20,
                        verbose_name="File Type",
                    ),
                ),
                (
                    "file_format",
                    models.CharField(
                        blank=True,
                        help_text="File extension/format (e.g., jpg, png, pdf)",
                        max_length=10,
                        verbose_name="File Format",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveBigIntegerField(
                        help_text="File size in bytes",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="File Size",
                    ),
                ),
                (
                    "width",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Image width in pixels (for images only)",
                        null=True,
                        verbose_name="Width",
                    ),
                ),
                (
                    "height",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Image height in pixels (for images only)",
                        null=True,
                        verbose_name="Height",
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Alternative text for accessibility and SEO",
                        max_length=255,
                        verbose_name="Alt Text",
                    ),
                ),
                (
                    "caption",
                    models.TextField(
                        blank=True,
                        help_text="Optional caption or description for the media",
                        max_length=1000,
                        verbose_name="Caption",
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags for organization",
                        max_length=500,
                        verbose_name="Tags",
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this media is referenced",
                        verbose_name="Usage Count",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded this media file",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Uploaded By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Media File",
                "verbose_name_plural": "Media Files",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        help_text="Article headline (max 300 characters for SEO)",
                        max_length=300,
                        validators=[
                            django.core.validators.MinLengthValidator(5),
                            django.core.validators.MaxLengthValidator(300),
                        ],
                        verbose_name="Title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of title (auto-generated if blank)",
                        max_length=300,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "excerpt",
                    models.TextField(
                        help_text="Brief article summary for listings and SEO (max 500 characters)",
                        max_length=500,
                        validators=[
                            django.core.validators.MinLengthValidator(10),
                            django.core.validators.MaxLengthValidator(500),
                        ],
                        verbose_name="Excerpt",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("review", "Under Review"),
                            ("scheduled", "Scheduled"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        db_index=True,
                        default="draft",
                        help_text="Current publication status",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "published_date",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When this article was/will be published",
                        null=True,
                        verbose_name="Published Date",
                    ),
                ),
                (
                    "scheduled_publish_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Automatic publication date (for scheduled articles)",
                        null=True,
                        verbose_name="Scheduled Publish Date",
                    ),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True,
                        help_text="SEO title tag (max 60 chars, uses article title if blank)",
                        max_length=60,
                        verbose_name="Meta Title",
                    ),
                ),
                (
                    "meta_description",
                    models.CharField(
                        blank=True,
                        help_text="SEO meta description (max 160 chars, uses excerpt if blank)",
                        max_length=160,
                        verbose_name="Meta Description",
                    ),
                ),
                (
                    "meta_keywords",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated SEO keywords (optional)",
                        max_length=255,
                        verbose_name="Meta Keywords",
                    ),
                ),
                (
                    "social_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for social media sharing (uses title if blank)",
                        max_length=100,
                        verbose_name="Social Media Title",
                    ),
                ),
                (
                    "social_description",
                    models.CharField(
                        blank=True,
                        help_text="Description for social media sharing",
                        max_length=200,
                        verbose_name="Social Media Description",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveBigIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Number of times this article has been viewed",
                        verbose_name="View Count",
                    ),
                ),
                (
                    "share_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this article has been shared",
                        verbose_name="Share Count",
                    ),
                ),
                (
                    "comment_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of comments on this article",
                        verbose_name="Comment Count",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this article should be featured prominently",
                        verbose_name="Is Featured",
                    ),
                ),
                (
                    "is_breaking",
                    models.BooleanField(
                        default=False,
                        help_text="Mark as breaking news for special treatment",
                        verbose_name="Breaking News",
                    ),
                ),
                (
                    "allow_comments",
                    models.BooleanField(
                        default=True,
                        help_text="Whether comments are enabled for this article",
                        verbose_name="Allow Comments",
                    ),
                ),
                (
                    "reviewed_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this article was last reviewed",
                        null=True,
                        verbose_name="Reviewed Date",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this article",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_articles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        help_text="User who last modified this article",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="modified_articles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Modified By",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who reviewed this article",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_articles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Reviewed By",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        help_text="Primary author of this article",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="articles",
                        to="core.author",
                        verbose_name="Author",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Primary category for this article",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="articles",
                        to="core.category",
                        verbose_name="Category",
                    ),
                ),
                (
                    "featured_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Main image for the article (recommended: 1200x800px)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="featured_articles",
                        to="core.cloudinarymedia",
                        verbose_name="Featured Image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Article",
                "verbose_name_plural": "Articles",
                "ordering": ["-published_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ContentSection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "section_type",
                    models.CharField(
                        choices=[
                            ("paragraph", "Paragraph"),
                            ("heading", "Heading"),
                            ("subheading", "Subheading"),
                            ("image", "Image"),
                            ("quote", "Quote"),
                            ("interview", "Interview"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("code", "Code Block"),
                            ("list", "List"),
                            ("table", "Table"),
                            ("embed", "Embed"),
                            ("divider", "Divider"),
                            ("callout", "Callout"),
                        ],
                        db_index=True,
                        help_text="Type of content section",
                        max_length=20,
                        verbose_name="Section Type",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Order of this section within the article",
                        verbose_name="Order",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True,
                        help_text="Main content for this section (HTML allowed)",
                        verbose_name="Content",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Optional title for this section",
                        max_length=200,
                        verbose_name="Section Title",
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Caption for media or section description",
                        max_length=500,
                        verbose_name="Caption",
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Alternative text for accessibility",
                        max_length=255,
                        verbose_name="Alt Text",
                    ),
                ),
                (
                    "question",
                    models.TextField(
                        blank=True,
                        help_text="Question text for interview sections",
                        verbose_name="Interview Question",
                    ),
                ),
                (
                    "answer",
                    models.TextField(
                        blank=True,
                        help_text="Answer text for interview sections",
                        verbose_name="Interview Answer",
                    ),
                ),
                (
                    "interviewer",
                    models.CharField(
                        blank=True,
                        help_text="Name of the interviewer",
                        max_length=200,
                        verbose_name="Interviewer",
                    ),
                ),
                (
                    "interviewee",
                    models.CharField(
                        blank=True,
                        help_text="Name of the person being interviewed",
                        max_length=200,
                        verbose_name="Interviewee",
                    ),
                ),
                (
                    "list_items",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Array of list items for list sections",
                        verbose_name="List Items",
                    ),
                ),
                (
                    "table_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Table structure and data for table sections",
                        verbose_name="Table Data",
                    ),
                ),
                (
                    "embed_code",
                    models.TextField(
                        blank=True,
                        help_text="HTML embed code for external content",
                        verbose_name="Embed Code",
                    ),
                ),
                (
                    "css_classes",
                    models.CharField(
                        blank=True,
                        help_text="Additional CSS classes for custom styling",
                        max_length=200,
                        verbose_name="CSS Classes",
                    ),
                ),
                (
                    "background_color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code for section background",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid hex color code",
                                regex="^#[0-9a-fA-F]{6}$",
                            )
                        ],
                        verbose_name="Background Color",
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this section should be displayed",
                        verbose_name="Is Visible",
                    ),
                ),
                (
                    "is_expandable",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this section can be collapsed/expanded",
                        verbose_name="Is Expandable",
                    ),
                ),
                (
                    "article",
                    models.ForeignKey(
                        help_text="Article this section belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content_sections",
                        to="core.article",
                        verbose_name="Article",
                    ),
                ),
                (
                    "media_file",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated media file for this section",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="content_sections",
                        to="core.cloudinarymedia",
                        verbose_name="Media File",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Section",
                "verbose_name_plural": "Content Sections",
                "ordering": ["article", "order"],
            },
        ),
        migrations.CreateModel(
            name="Newsletter",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Internal title for the newsletter",
                        max_length=300,
                        validators=[
                            django.core.validators.MinLengthValidator(5),
                            django.core.validators.MaxLengthValidator(300),
                        ],
                        verbose_name="Newsletter Title",
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="Subject line for the email",
                        max_length=200,
                        validators=[
                            django.core.validators.MinLengthValidator(5),
                            django.core.validators.MaxLengthValidator(200),
                        ],
                        verbose_name="Email Subject",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Newsletter content (HTML allowed)",
                        verbose_name="Content",
                    ),
                ),
                (
                    "is_sent",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this newsletter has been sent",
                        verbose_name="Is Sent",
                    ),
                ),
                (
                    "sent_date",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When this newsletter was sent",
                        null=True,
                        verbose_name="Sent Date",
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this newsletter is scheduled to be sent",
                        null=True,
                        verbose_name="Scheduled Date",
                    ),
                ),
                (
                    "total_sent",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of emails sent",
                        verbose_name="Total Sent",
                    ),
                ),
                (
                    "open_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of opens tracked",
                        verbose_name="Open Count",
                    ),
                ),
                (
                    "click_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of clicks tracked",
                        verbose_name="Click Count",
                    ),
                ),
                (
                    "bounce_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of bounced emails",
                        verbose_name="Bounce Count",
                    ),
                ),
                (
                    "unsubscribe_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of unsubscribes from this newsletter",
                        verbose_name="Unsubscribe Count",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_newsletters",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Newsletter",
                "verbose_name_plural": "Newsletters",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SiteSettings",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "site_name",
                    models.CharField(
                        default="Centre for Inclusive Social Development",
                        help_text="Name of the organization/site",
                        max_length=200,
                        verbose_name="Site Name",
                    ),
                ),
                (
                    "site_tagline",
                    models.CharField(
                        blank=True,
                        help_text="Brief tagline or motto",
                        max_length=300,
                        verbose_name="Site Tagline",
                    ),
                ),
                (
                    "site_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the organization and its mission",
                        max_length=1000,
                        verbose_name="Site Description",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Main contact email address",
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Contact Email",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Main contact phone number",
                        max_length=50,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Physical address",
                        max_length=500,
                        verbose_name="Address",
                    ),
                ),
                (
                    "facebook_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="Facebook URL",
                    ),
                ),
                (
                    "twitter_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="Twitter URL",
                    ),
                ),
                (
                    "linkedin_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="LinkedIn URL",
                    ),
                ),
                (
                    "youtube_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="YouTube URL",
                    ),
                ),
                (
                    "instagram_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="Instagram URL",
                    ),
                ),
                (
                    "default_meta_title",
                    models.CharField(
                        blank=True,
                        help_text="Default title for SEO (max 60 characters)",
                        max_length=60,
                        verbose_name="Default Meta Title",
                    ),
                ),
                (
                    "default_meta_description",
                    models.CharField(
                        blank=True,
                        help_text="Default description for SEO (max 160 characters)",
                        max_length=160,
                        verbose_name="Default Meta Description",
                    ),
                ),
                (
                    "google_analytics_id",
                    models.CharField(
                        blank=True,
                        help_text="Google Analytics measurement ID (e.g., G-XXXXXXXXXX)",
                        max_length=50,
                        verbose_name="Google Analytics ID",
                    ),
                ),
                (
                    "google_tag_manager_id",
                    models.CharField(
                        blank=True,
                        help_text="Google Tag Manager container ID",
                        max_length=50,
                        verbose_name="Google Tag Manager ID",
                    ),
                ),
                (
                    "enable_comments",
                    models.BooleanField(
                        default=True,
                        help_text="Whether comments are enabled site-wide",
                        verbose_name="Enable Comments",
                    ),
                ),
                (
                    "enable_newsletter",
                    models.BooleanField(
                        default=True,
                        help_text="Whether newsletter signup is enabled",
                        verbose_name="Enable Newsletter",
                    ),
                ),
                (
                    "maintenance_mode",
                    models.BooleanField(
                        default=False,
                        help_text="Put site in maintenance mode",
                        verbose_name="Maintenance Mode",
                    ),
                ),
                (
                    "default_og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Default image for social media sharing (1200x630px)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="site_og_images",
                        to="core.cloudinarymedia",
                        verbose_name="Default Social Media Image",
                    ),
                ),
                (
                    "favicon",
                    models.ForeignKey(
                        blank=True,
                        help_text="Site favicon (32x32px)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="site_favicons",
                        to="core.cloudinarymedia",
                        verbose_name="Favicon",
                    ),
                ),
                (
                    "logo",
                    models.ForeignKey(
                        blank=True,
                        help_text="Main site logo",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="site_logos",
                        to="core.cloudinarymedia",
                        verbose_name="Logo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Site Settings",
                "verbose_name_plural": "Site Settings",
            },
        ),
        migrations.CreateModel(
            name="Subscriber",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        help_text="Subscriber's email address",
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email Address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="Subscriber's first name",
                        max_length=100,
                        validators=[django.core.validators.MaxLengthValidator(100)],
                        verbose_name="First Name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="Subscriber's last name",
                        max_length=100,
                        validators=[django.core.validators.MaxLengthValidator(100)],
                        verbose_name="Last Name",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Subscriber's location (city, state, country)",
                        max_length=200,
                        verbose_name="Location",
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        blank=True,
                        help_text="Subscriber's postal/zip code",
                        max_length=20,
                        verbose_name="Zip Code",
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("breaking", "Breaking News Only"),
                        ],
                        default="weekly",
                        help_text="How often to receive newsletters",
                        max_length=20,
                        verbose_name="Email Frequency",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether subscription is active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "confirmed_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When email was confirmed (double opt-in)",
                        null=True,
                        verbose_name="Confirmed At",
                    ),
                ),
                (
                    "unsubscribed_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When subscriber opted out",
                        null=True,
                        verbose_name="Unsubscribed At",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="How the subscriber was acquired",
                        max_length=100,
                        verbose_name="Source",
                    ),
                ),
                (
                    "last_sent",
                    models.DateTimeField(
                        blank=True,
                        help_text="When last newsletter was sent to this subscriber",
                        null=True,
                        verbose_name="Last Sent",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Content categories of interest",
                        related_name="subscribers",
                        to="core.category",
                        verbose_name="Interested Categories",
                    ),
                ),
            ],
            options={
                "verbose_name": "Newsletter Subscriber",
                "verbose_name_plural": "Newsletter Subscribers",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Descriptive tag name (e.g., 'Civic Participation')",
                        max_length=100,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.MaxLengthValidator(100),
                        ],
                        verbose_name="Tag Name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the tag name (auto-generated)",
                        max_length=100,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of what this tag represents",
                        max_length=300,
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this tag should be prominently displayed",
                        verbose_name="Is Featured",
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Number of articles using this tag (auto-calculated)",
                        verbose_name="Usage Count",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "ordering": ["-usage_count", "name"],
                "indexes": [
                    models.Index(
                        fields=["is_featured", "-usage_count"],
                        name="core_tag_is_feat_c1d690_idx",
                    ),
                    models.Index(fields=["slug"], name="core_tag_slug_4ab57c_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Timestamp when this record was first created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Timestamp when this record was last modified",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        help_text="Clear, descriptive title for the event",
                        max_length=300,
                        validators=[
                            django.core.validators.MinLengthValidator(5),
                            django.core.validators.MaxLengthValidator(300),
                        ],
                        verbose_name="Event Title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of title",
                        max_length=300,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the event",
                        max_length=2000,
                        validators=[django.core.validators.MinLengthValidator(20)],
                        verbose_name="Description",
                    ),
                ),
                (
                    "short_description",
                    models.CharField(
                        blank=True,
                        help_text="Brief description for listings",
                        max_length=500,
                        verbose_name="Short Description",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("virtual", "Virtual Event"),
                            ("in_person", "In-Person Event"),
                            ("hybrid", "Hybrid Event"),
                            ("webinar", "Webinar"),
                            ("workshop", "Workshop"),
                            ("conference", "Conference"),
                            ("dialogue", "Community Dialogue"),
                            ("training", "Training Session"),
                        ],
                        db_index=True,
                        help_text="Format/type of the event",
                        max_length=20,
                        verbose_name="Event Type",
                    ),
                ),
                (
                    "start_datetime",
                    models.DateTimeField(
                        db_index=True,
                        help_text="When the event begins",
                        verbose_name="Start Date & Time",
                    ),
                ),
                (
                    "end_datetime",
                    models.DateTimeField(
                        db_index=True,
                        help_text="When the event ends",
                        verbose_name="End Date & Time",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="Africa/Lagos",
                        help_text="Event timezone",
                        max_length=50,
                        verbose_name="Timezone",
                    ),
                ),
                (
                    "venue_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the venue (for in-person events)",
                        max_length=300,
                        verbose_name="Venue Name",
                    ),
                ),
                (
                    "venue_address",
                    models.TextField(
                        blank=True,
                        help_text="Full address of the venue",
                        max_length=500,
                        verbose_name="Venue Address",
                    ),
                ),
                (
                    "online_url",
                    models.URLField(
                        blank=True,
                        help_text="Link for virtual participation",
                        max_length=500,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="Online URL",
                    ),
                ),
                (
                    "agenda",
                    models.TextField(
                        blank=True,
                        help_text="Detailed agenda or schedule",
                        verbose_name="Agenda",
                    ),
                ),
                (
                    "registration_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether attendees must register",
                        verbose_name="Registration Required",
                    ),
                ),
                (
                    "registration_url",
                    models.URLField(
                        blank=True,
                        help_text="External registration link",
                        max_length=500,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="Registration URL",
                    ),
                ),
                (
                    "registration_deadline",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last date for registration",
                        null=True,
                        verbose_name="Registration Deadline",
                    ),
                ),
                (
                    "max_attendees",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of attendees (if limited)",
                        null=True,
                        verbose_name="Maximum Attendees",
                    ),
                ),
                (
                    "current_attendees",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of registered attendees",
                        verbose_name="Current Attendees",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("upcoming", "Upcoming"),
                            ("ongoing", "Ongoing"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("postponed", "Postponed"),
                        ],
                        db_index=True,
                        default="upcoming",
                        help_text="Current status of the event",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this event should be featured",
                        verbose_name="Is Featured",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this event is publicly visible",
                        verbose_name="Is Public",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        help_text="Event category (optional)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="core.category",
                        verbose_name="Category",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_events",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "featured_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Main image for the event",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="featured_events",
                        to="core.cloudinarymedia",
                        verbose_name="Featured Image",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Primary event organizer",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organized_events",
                        to="core.author",
                        verbose_name="Organizer",
                    ),
                ),
                (
                    "speakers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Event speakers and facilitators",
                        related_name="speaking_events",
                        to="core.author",
                        verbose_name="Speakers",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Tags for categorizing the event",
                        related_name="events",
                        to="core.tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
                "ordering": ["start_datetime"],
            },
        ),
        migrations.AddField(
            model_name="article",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tags for categorizing and cross-referencing",
                related_name="articles",
                to="core.tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(
                fields=["is_active", "is_featured"],
                name="core_author_is_acti_5b220f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(fields=["name"], name="core_author_name_fca240_idx"),
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(
                fields=["sort_order"], name="core_author_sort_or_42cd70_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudinarymedia",
            index=models.Index(
                fields=["file_type", "-created_at"],
                name="core_cloudi_file_ty_62acd5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cloudinarymedia",
            index=models.Index(
                fields=["cloudinary_public_id"], name="core_cloudi_cloudin_c40809_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudinarymedia",
            index=models.Index(fields=["title"], name="core_cloudi_title_ccb3ad_idx"),
        ),
        migrations.AddIndex(
            model_name="cloudinarymedia",
            index=models.Index(
                fields=["-usage_count"], name="core_cloudi_usage_c_3e9828_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudinarymedia",
            index=models.Index(
                fields=["uploaded_by", "-created_at"],
                name="core_cloudi_uploade_c3a6c3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contentsection",
            index=models.Index(
                fields=["article", "order"], name="core_conten_article_917b4e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contentsection",
            index=models.Index(
                fields=["article", "section_type"],
                name="core_conten_article_6c19ea_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contentsection",
            index=models.Index(
                fields=["section_type"], name="core_conten_section_0f1173_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="contentsection",
            constraint=models.UniqueConstraint(
                fields=("article", "order"), name="unique_section_order_per_article"
            ),
        ),
        migrations.AddIndex(
            model_name="newsletter",
            index=models.Index(
                fields=["is_sent", "-sent_date"], name="core_newsle_is_sent_bf86bc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="newsletter",
            index=models.Index(
                fields=["scheduled_date"], name="core_newsle_schedul_047958_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="newsletter",
            index=models.Index(
                fields=["-created_at"], name="core_newsle_created_2c3b94_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscriber",
            index=models.Index(
                fields=["is_active", "confirmed_at"],
                name="core_subscr_is_acti_dd26af_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="subscriber",
            index=models.Index(fields=["email"], name="core_subscr_email_ef2bb6_idx"),
        ),
        migrations.AddIndex(
            model_name="subscriber",
            index=models.Index(
                fields=["location"], name="core_subscr_locatio_51bfbc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscriber",
            index=models.Index(
                fields=["-created_at"], name="core_subscr_created_511449_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscriber",
            index=models.Index(
                fields=["frequency", "is_active"], name="core_subscr_frequen_9c4dbe_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["status", "start_datetime"], name="core_event_status_b1eba0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["event_type", "status"], name="core_event_event_t_5dba9e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["is_featured", "start_datetime"],
                name="core_event_is_feat_bb5ead_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["is_public", "status", "start_datetime"],
                name="core_event_is_publ_68846f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["slug"], name="core_event_slug_7e3734_idx"),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.CheckConstraint(
                condition=models.Q(("end_datetime__gt", models.F("start_datetime"))),
                name="event_end_after_start",
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["status", "-published_date"],
                name="core_articl_status_58b80a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["category", "status", "-published_date"],
                name="core_articl_categor_0a3332_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["author", "status", "-published_date"],
                name="core_articl_author__e0a2a0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["is_featured", "-published_date"],
                name="core_articl_is_feat_57bc0d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["-view_count"], name="core_articl_view_co_4604ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["is_breaking", "-published_date"],
                name="core_articl_is_brea_57dcc9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(fields=["slug"], name="core_articl_slug_d38768_idx"),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(fields=["title"], name="core_articl_title_2488db_idx"),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["status", "created_by"], name="core_articl_status_03344a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["scheduled_publish_date"], name="core_articl_schedul_1018b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=["status", "is_featured", "-published_date"],
                name="core_articl_status_7bb771_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="article",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("published_date__isnull", True),
                    ("status", "published"),
                    _negated=True,
                ),
                name="published_articles_have_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="article",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("scheduled_publish_date__isnull", True),
                    ("status", "scheduled"),
                    _negated=True,
                ),
                name="scheduled_articles_have_date",
            ),
        ),
    ]
