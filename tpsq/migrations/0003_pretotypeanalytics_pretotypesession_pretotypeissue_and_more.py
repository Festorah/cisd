# Generated by Django 5.2.5 on 2025-08-30 13:30

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("tpsq", "0002_alter_surveyresponse_preference"),
    ]

    operations = [
        migrations.CreateModel(
            name="PretotypeAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True, unique=True)),
                ("total_sessions", models.PositiveIntegerField(default=0)),
                ("step_1_sessions", models.PositiveIntegerField(default=0)),
                ("step_2_sessions", models.PositiveIntegerField(default=0)),
                ("step_3_sessions", models.PositiveIntegerField(default=0)),
                ("completed_sessions", models.PositiveIntegerField(default=0)),
                ("issues_light", models.PositiveIntegerField(default=0)),
                ("issues_roads", models.PositiveIntegerField(default=0)),
                ("issues_waste", models.PositiveIntegerField(default=0)),
                ("issues_water", models.PositiveIntegerField(default=0)),
                ("issues_security", models.PositiveIntegerField(default=0)),
                ("issues_healthcare", models.PositiveIntegerField(default=0)),
                ("issues_education", models.PositiveIntegerField(default=0)),
                ("issues_others", models.PositiveIntegerField(default=0)),
                ("issues_with_details", models.PositiveIntegerField(default=0)),
                ("avg_time_to_submit", models.FloatField(blank=True, null=True)),
                ("contacts_with_email", models.PositiveIntegerField(default=0)),
                ("contacts_with_whatsapp", models.PositiveIntegerField(default=0)),
                ("cta_click_rate", models.FloatField(blank=True, null=True)),
                ("issue_submission_rate", models.FloatField(blank=True, null=True)),
                ("contact_conversion_rate", models.FloatField(blank=True, null=True)),
                ("overall_conversion_rate", models.FloatField(blank=True, null=True)),
                ("mobile_sessions", models.PositiveIntegerField(default=0)),
                ("desktop_sessions", models.PositiveIntegerField(default=0)),
                ("tablet_sessions", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Pretotype Daily Analytics",
                "verbose_name_plural": "Pretotype Daily Analytics",
                "db_table": "pretotype_analytics",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="PretotypeSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_id",
                    models.UUIDField(
                        db_index=True,
                        help_text="Frontend-generated session UUID",
                        unique=True,
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, help_text="When session began"
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, help_text="Last recorded activity"
                    ),
                ),
                (
                    "completed_funnel",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Did user complete all 3 steps",
                    ),
                ),
                (
                    "max_step_reached",
                    models.PositiveSmallIntegerField(
                        default=1, help_text="Highest step number reached (1-3)"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="User IP for fraud detection", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="Full user agent string"),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("mobile", "Mobile"),
                            ("tablet", "Tablet"),
                            ("desktop", "Desktop"),
                            ("unknown", "Unknown"),
                        ],
                        db_index=True,
                        default="unknown",
                        max_length=20,
                    ),
                ),
                (
                    "screen_size",
                    models.CharField(
                        blank=True,
                        help_text="Screen resolution (e.g., 1920x1080)",
                        max_length=20,
                    ),
                ),
                (
                    "viewport_size",
                    models.CharField(
                        blank=True, help_text="Browser viewport size", max_length=20
                    ),
                ),
                (
                    "referrer",
                    models.URLField(
                        blank=True, help_text="Referring page URL", max_length=500
                    ),
                ),
                (
                    "utm_source",
                    models.CharField(blank=True, db_index=True, max_length=100),
                ),
                (
                    "utm_medium",
                    models.CharField(blank=True, db_index=True, max_length=100),
                ),
                (
                    "utm_campaign",
                    models.CharField(blank=True, db_index=True, max_length=200),
                ),
                ("utm_content", models.CharField(blank=True, max_length=200)),
                ("utm_term", models.CharField(blank=True, max_length=200)),
                (
                    "total_time_on_site",
                    models.PositiveIntegerField(
                        default=0, help_text="Total time spent in seconds"
                    ),
                ),
                (
                    "step_1_time",
                    models.PositiveIntegerField(
                        default=0, help_text="Time spent on landing page (seconds)"
                    ),
                ),
                (
                    "step_2_time",
                    models.PositiveIntegerField(
                        default=0, help_text="Time spent on form (seconds)"
                    ),
                ),
                (
                    "step_3_time",
                    models.PositiveIntegerField(
                        default=0, help_text="Time spent on thank you page (seconds)"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, help_text="2-letter country code", max_length=2
                    ),
                ),
                ("city", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "verbose_name": "Pretotype Session",
                "verbose_name_plural": "Pretotype Sessions",
                "db_table": "pretotype_sessions",
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["started_at", "device_type"],
                        name="pretotype_s_started_8c3d92_idx",
                    ),
                    models.Index(
                        fields=["completed_funnel", "started_at"],
                        name="pretotype_s_complet_599a43_idx",
                    ),
                    models.Index(
                        fields=["max_step_reached", "started_at"],
                        name="pretotype_s_max_ste_d94640_idx",
                    ),
                    models.Index(
                        fields=["utm_source", "utm_campaign"],
                        name="pretotype_s_utm_sou_74edc8_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PretotypeIssue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "issue_type",
                    models.CharField(
                        choices=[
                            ("light", "Light / Electricity"),
                            ("roads", "Roads / Transportation"),
                            ("waste", "Waste / Sanitation"),
                            ("water", "Water Supply"),
                            ("security", "Security"),
                            ("healthcare", "Healthcare"),
                            ("education", "Education"),
                            ("others", "Others"),
                        ],
                        db_index=True,
                        help_text="Type of public service issue",
                        max_length=20,
                    ),
                ),
                (
                    "issue_details",
                    models.TextField(
                        blank=True, help_text="Optional details provided by user"
                    ),
                ),
                (
                    "issue_image",
                    models.ImageField(
                        blank=True,
                        help_text="Optional photo of the issue",
                        null=True,
                        upload_to="pretotype/issues/%Y/%m/",
                    ),
                ),
                (
                    "image_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to uploaded image if using external storage",
                    ),
                ),
                (
                    "has_details",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Did user provide additional details",
                    ),
                ),
                (
                    "has_image",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Did user provide a photo",
                    ),
                ),
                (
                    "details_word_count",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Number of words in details field"
                    ),
                ),
                (
                    "image_size",
                    models.PositiveIntegerField(
                        default=0, help_text="Image file size in bytes"
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(auto_now_add=True, db_index=True),
                ),
                (
                    "time_to_submit",
                    models.PositiveIntegerField(
                        help_text="Seconds from form display to submission"
                    ),
                ),
                (
                    "is_test_data",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Flag obvious test submissions",
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        help_text="Which session reported this issue",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="issue",
                        to="tpsq.pretotypesession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pretotype Issue",
                "verbose_name_plural": "Pretotype Issues",
                "db_table": "pretotype_issues",
                "ordering": ["-submitted_at"],
                "indexes": [
                    models.Index(
                        fields=["issue_type", "submitted_at"],
                        name="pretotype_i_issue_t_f05a10_idx",
                    ),
                    models.Index(
                        fields=["has_details", "submitted_at"],
                        name="pretotype_i_has_det_ec1a42_idx",
                    ),
                    models.Index(
                        fields=["has_image", "submitted_at"],
                        name="pretotype_i_has_ima_99cf91_idx",
                    ),
                    models.Index(
                        fields=["is_test_data", "submitted_at"],
                        name="pretotype_i_is_test_3a2e46_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PretotypeEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("page_view", "Page Loaded"),
                            ("cta_hover", "CTA Button Hovered"),
                            ("cta_click", "CTA Button Clicked"),
                            ("scroll_behavior", "Page Scroll"),
                            ("form_displayed", "Form Displayed"),
                            ("form_interaction", "Form Field Interaction"),
                            ("dropdown_opened", "Issue Type Dropdown Opened"),
                            ("issue_type_selected", "Issue Type Selected"),
                            ("details_field_focused", "Details Field Focused"),
                            ("details_typing", "User Typing in Details"),
                            ("form_validation_error", "Form Validation Error"),
                            ("issue_submitted", "Issue Report Submitted"),
                            ("thank_you_displayed", "Thank You Page Shown"),
                            ("contact_field_focused", "Contact Field Focused"),
                            ("checkbox_clicked", "Opt-in Checkbox Clicked"),
                            ("contact_submitted", "Contact Details Submitted"),
                            ("funnel_completed", "Full Funnel Completed"),
                            ("page_exit", "User Left Page"),
                            ("form_abandoned", "Form Abandoned"),
                            ("back_button", "Back Button Pressed"),
                            ("tab_switch", "Switched to Another Tab"),
                            ("javascript_error", "JavaScript Error"),
                            ("network_error", "Network/API Error"),
                        ],
                        db_index=True,
                        max_length=30,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "step",
                    models.PositiveSmallIntegerField(help_text="Which step (1-3)"),
                ),
                (
                    "time_from_start",
                    models.PositiveIntegerField(
                        help_text="Milliseconds since session start"
                    ),
                ),
                (
                    "time_since_page_load",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Milliseconds since current page loaded",
                        null=True,
                    ),
                ),
                ("page_url", models.URLField(blank=True, max_length=500)),
                ("element_id", models.CharField(blank=True, max_length=100)),
                ("element_text", models.CharField(blank=True, max_length=200)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional event data in JSON format",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="tpsq.pretotypesession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pretotype Event",
                "verbose_name_plural": "Pretotype Events",
                "db_table": "pretotype_events",
                "ordering": ["timestamp"],
                "indexes": [
                    models.Index(
                        fields=["event_type", "timestamp"],
                        name="pretotype_e_event_t_20a48a_idx",
                    ),
                    models.Index(
                        fields=["session", "step"],
                        name="pretotype_e_session_4549f9_idx",
                    ),
                    models.Index(
                        fields=["session", "timestamp"],
                        name="pretotype_e_session_40a39f_idx",
                    ),
                    models.Index(
                        fields=["step", "event_type"],
                        name="pretotype_e_step_34c6fb_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PretotypeContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address for updates",
                        max_length=254,
                    ),
                ),
                (
                    "whatsapp",
                    models.CharField(
                        blank=True,
                        help_text="WhatsApp number for updates",
                        max_length=20,
                    ),
                ),
                (
                    "opted_in",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Did user check the opt-in box",
                    ),
                ),
                (
                    "email_domain",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Email domain for analysis (gmail.com, yahoo.com, etc)",
                        max_length=100,
                    ),
                ),
                (
                    "is_business_email",
                    models.BooleanField(
                        default=False,
                        help_text="Appears to be business/organization email",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(auto_now_add=True, db_index=True),
                ),
                (
                    "launch_notification_sent",
                    models.BooleanField(
                        default=False, help_text="Have we notified them about launch"
                    ),
                ),
                (
                    "launch_notification_sent_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "session",
                    models.OneToOneField(
                        help_text="Which session provided contact info",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact",
                        to="tpsq.pretotypesession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pretotype Contact",
                "verbose_name_plural": "Pretotype Contacts",
                "db_table": "pretotype_contacts",
                "ordering": ["-submitted_at"],
                "indexes": [
                    models.Index(
                        fields=["opted_in", "submitted_at"],
                        name="pretotype_c_opted_i_38dd80_idx",
                    ),
                    models.Index(
                        fields=["email_domain", "submitted_at"],
                        name="pretotype_c_email_d_d2626b_idx",
                    ),
                    models.Index(
                        fields=["is_business_email", "submitted_at"],
                        name="pretotype_c_is_busi_ab96bd_idx",
                    ),
                    models.Index(
                        fields=["launch_notification_sent"],
                        name="pretotype_c_launch__fec3e9_idx",
                    ),
                ],
            },
        ),
    ]
