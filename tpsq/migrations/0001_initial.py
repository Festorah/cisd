# Generated by Django 5.2.5 on 2025-08-20 10:47

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DailyStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        db_index=True,
                        help_text="Date for these statistics",
                        unique=True,
                    ),
                ),
                (
                    "ad_impressions",
                    models.PositiveIntegerField(
                        default=0, help_text="Total ad impressions"
                    ),
                ),
                (
                    "ad_clicks",
                    models.PositiveIntegerField(default=0, help_text="Total ad clicks"),
                ),
                (
                    "page_views",
                    models.PositiveIntegerField(
                        default=0, help_text="Total page views"
                    ),
                ),
                (
                    "unique_visitors",
                    models.PositiveIntegerField(default=0, help_text="Unique sessions"),
                ),
                (
                    "surveys_started",
                    models.PositiveIntegerField(
                        default=0, help_text="Users who began survey"
                    ),
                ),
                (
                    "surveys_completed",
                    models.PositiveIntegerField(
                        default=0, help_text="Users who completed survey"
                    ),
                ),
                (
                    "signups",
                    models.PositiveIntegerField(
                        default=0, help_text="Successful signups"
                    ),
                ),
                (
                    "verified_signups",
                    models.PositiveIntegerField(
                        default=0, help_text="Email verified signups"
                    ),
                ),
                (
                    "prefer_nothing",
                    models.PositiveIntegerField(
                        default=0, help_text="Users preferring no follow-up"
                    ),
                ),
                (
                    "prefer_notification",
                    models.PositiveIntegerField(
                        default=0, help_text="Users wanting resolution notification"
                    ),
                ),
                (
                    "prefer_updates",
                    models.PositiveIntegerField(
                        default=0, help_text="Users wanting progress updates"
                    ),
                ),
                (
                    "click_through_rate",
                    models.FloatField(
                        blank=True, help_text="Ad clicks / impressions * 100", null=True
                    ),
                ),
                (
                    "page_conversion_rate",
                    models.FloatField(
                        blank=True, help_text="Signups / page views * 100", null=True
                    ),
                ),
                (
                    "overall_conversion_rate",
                    models.FloatField(
                        blank=True,
                        help_text="Signups / ad impressions * 100",
                        null=True,
                    ),
                ),
                (
                    "survey_completion_rate",
                    models.FloatField(
                        blank=True,
                        help_text="Survey completed / started * 100",
                        null=True,
                    ),
                ),
                (
                    "avg_time_on_site",
                    models.FloatField(
                        blank=True,
                        help_text="Average session duration in minutes",
                        null=True,
                    ),
                ),
                (
                    "bounce_rate",
                    models.FloatField(
                        blank=True,
                        help_text="Percentage of single-page sessions",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Daily Statistics",
                "verbose_name_plural": "Daily Statistics",
                "db_table": "daily_stats",
                "ordering": ["-date"],
                "indexes": [
                    models.Index(fields=["date"], name="daily_stats_date_c5e813_idx"),
                    models.Index(
                        fields=["updated_at"], name="daily_stats_updated_8e64eb_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        help_text="Unique identifier for this user session",
                        unique=True,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        db_index=True,
                        help_text="User's IP address for analytics and fraud prevention",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="Browser and device information"
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When user first arrived",
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, db_index=True, help_text="Last recorded activity"
                    ),
                ),
                (
                    "utm_source",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Traffic source (google, facebook, twitter, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "utm_medium",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Marketing medium (cpc, social, email, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "utm_campaign",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Campaign name",
                        max_length=200,
                    ),
                ),
                (
                    "utm_content",
                    models.CharField(
                        blank=True,
                        help_text="Ad content or creative variant",
                        max_length=200,
                    ),
                ),
                (
                    "utm_term",
                    models.CharField(
                        blank=True, help_text="Keywords for paid search", max_length=200
                    ),
                ),
                (
                    "referrer",
                    models.URLField(
                        blank=True, help_text="Referring website URL", max_length=500
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="ISO 2-letter country code (e.g., NG)",
                        max_length=2,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}$", "Must be 2-letter country code"
                            )
                        ],
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, db_index=True, help_text="City name", max_length=100
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True, help_text="State or region", max_length=100
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("mobile", "Mobile"),
                            ("tablet", "Tablet"),
                            ("desktop", "Desktop"),
                            ("unknown", "Unknown"),
                        ],
                        db_index=True,
                        default="unknown",
                        max_length=20,
                    ),
                ),
                (
                    "browser",
                    models.CharField(
                        blank=True,
                        help_text="Browser name (Chrome, Safari, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "os",
                    models.CharField(
                        blank=True, help_text="Operating system", max_length=50
                    ),
                ),
                (
                    "page_views",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of pages viewed in this session"
                    ),
                ),
                (
                    "time_on_site",
                    models.PositiveIntegerField(
                        default=0, help_text="Total time spent on site in seconds"
                    ),
                ),
                (
                    "is_bounce",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="True if user left without meaningful engagement",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "db_table": "user_sessions",
                "ordering": ["-first_seen"],
                "indexes": [
                    models.Index(
                        fields=["first_seen", "utm_source"],
                        name="user_sessio_first_s_b39dc8_idx",
                    ),
                    models.Index(
                        fields=["country_code", "city"],
                        name="user_sessio_country_e62560_idx",
                    ),
                    models.Index(
                        fields=["device_type", "first_seen"],
                        name="user_sessio_device__4ad739_idx",
                    ),
                    models.Index(
                        fields=["utm_campaign", "first_seen"],
                        name="user_sessio_utm_cam_9acae2_idx",
                    ),
                    models.Index(
                        fields=["is_bounce", "first_seen"],
                        name="user_sessio_is_boun_af32da_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SurveyResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preference",
                    models.CharField(
                        choices=[
                            ("nothing", "Nothing - Just report and move on"),
                            ("notification", "Be notified when resolved"),
                            ("updates", "Get progress updates throughout"),
                        ],
                        db_index=True,
                        help_text="User's preferred level of engagement",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "time_to_select",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Seconds from page load to option selection",
                        null=True,
                    ),
                ),
                (
                    "changed_mind_count",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="How many times user changed their selection",
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="survey",
                        to="tpsq.usersession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Survey Response",
                "verbose_name_plural": "Survey Responses",
                "db_table": "survey_responses",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["preference", "created_at"],
                        name="survey_resp_prefere_ac5cd1_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="survey_resp_created_5a9263_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FunnelEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("ad_impression", "Ad Impression"),
                            ("ad_click", "Ad Click"),
                            ("page_view", "Page View"),
                            ("survey_start", "Survey Started"),
                            ("survey_complete", "Survey Completed"),
                            ("form_focus", "Form Field Focused"),
                            ("form_start", "Form Started"),
                            ("form_error", "Form Validation Error"),
                            ("signup_attempt", "Signup Attempted"),
                            ("signup_success", "Signup Successful"),
                            ("page_exit", "Page Exit"),
                        ],
                        db_index=True,
                        help_text="Type of user action",
                        max_length=20,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When this event occurred",
                    ),
                ),
                (
                    "page_url",
                    models.URLField(
                        blank=True, help_text="URL where event occurred", max_length=500
                    ),
                ),
                (
                    "page_title",
                    models.CharField(
                        blank=True, help_text="Page title", max_length=200
                    ),
                ),
                (
                    "element_id",
                    models.CharField(
                        blank=True,
                        help_text="DOM element ID if applicable",
                        max_length=100,
                    ),
                ),
                (
                    "element_text",
                    models.CharField(
                        blank=True,
                        help_text="Text content of clicked element",
                        max_length=200,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional event data in JSON format",
                    ),
                ),
                (
                    "time_since_page_load",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Milliseconds since page load when event occurred",
                        null=True,
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="tpsq.usersession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Funnel Event",
                "verbose_name_plural": "Funnel Events",
                "db_table": "funnel_events",
                "ordering": ["timestamp"],
                "indexes": [
                    models.Index(
                        fields=["event_type", "timestamp"],
                        name="funnel_even_event_t_23a35b_idx",
                    ),
                    models.Index(
                        fields=["session", "event_type"],
                        name="funnel_even_session_a2178c_idx",
                    ),
                    models.Index(
                        fields=["session", "timestamp"],
                        name="funnel_even_session_d6ffbc_idx",
                    ),
                    models.Index(
                        fields=["timestamp", "event_type"],
                        name="funnel_even_timesta_778cf9_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EarlyAccessSignup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="User's full name", max_length=200),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        help_text="User's email address",
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When signup was completed",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Last modification time"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Has email been verified",
                    ),
                ),
                (
                    "verification_token",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Email verification token",
                        unique=True,
                    ),
                ),
                (
                    "verification_sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When verification email was sent",
                        null=True,
                    ),
                ),
                (
                    "verified_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When email was verified",
                        null=True,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="IP address (legacy field)", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="User agent (legacy field)"),
                ),
                (
                    "login_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of times user has logged in"
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, help_text="Last login timestamp", null=True
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        blank=True,
                        help_text="Associated user session (if tracked)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="signup",
                        to="tpsq.usersession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Early Access Signup",
                "verbose_name_plural": "Early Access Signups",
                "db_table": "early_access_signups",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["created_at"], name="early_acces_created_ebbfc5_idx"
                    ),
                    models.Index(fields=["email"], name="early_acces_email_5d1e8e_idx"),
                    models.Index(
                        fields=["is_verified", "created_at"],
                        name="early_acces_is_veri_557b4d_idx",
                    ),
                    models.Index(
                        fields=["verified_at"], name="early_acces_verifie_318208_idx"
                    ),
                ],
            },
        ),
    ]
